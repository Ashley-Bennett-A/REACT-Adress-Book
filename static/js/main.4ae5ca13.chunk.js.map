{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","valueNum","undefined","valueName","number","name","addNumber","newNums","_this","concat","setState","onChangeNum","e","target","value","addName","newNames","onChangeName","add","react_default","a","createElement","className","type","this","placeholder","onChange","required","onClick","map","key","num","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA6FeA,oNAzFbC,MAAQ,CACNC,cAAUC,EACVC,eAAWD,EACXE,OAAQ,GACRC,KAAM,MAGRC,UAAY,WACV,IACIC,EADOC,EAAKR,MAAMI,OACHK,OAAO,CAACD,EAAKR,MAAMC,WACtCO,EAAKE,SAAS,CACZN,OAAQG,EACRN,cAAUC,EACVC,eAAWD,OAIfS,YAAc,SAAAC,GACZJ,EAAKE,SAAS,CAAET,SAAUW,EAAEC,OAAOC,WAGrCC,QAAU,WACR,IACIC,EADOR,EAAKR,MAAMK,KACFI,OAAO,CAACD,EAAKR,MAAMG,YACvCK,EAAKE,SAAS,CACZL,KAAMW,EACNf,cAAUC,EACVC,eAAWD,OAIfe,aAAe,SAAAL,GACbJ,EAAKE,SAAS,CAAEP,UAAWS,EAAEC,OAAOC,WAGtCI,IAAM,WACJV,EAAKO,UACLP,EAAKF,qFAIL,OACEa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,SACEC,UAAU,OACVC,KAAK,OACLT,MAAOU,KAAKxB,MAAMc,MAClBW,YAAY,OACZC,SAAUF,KAAKP,aACfU,UAAQ,IAEVR,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVC,KAAK,OACLT,MAAOU,KAAKxB,MAAMc,MAClBW,YAAY,SACZC,SAAUF,KAAKb,YACfgB,UAAQ,IAEVR,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAAST,MAAM,SAASc,QAASJ,KAAKN,MAElDC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGG,KAAKxB,MAAMK,KAAKwB,IAAI,SAAAxB,GAAI,OACvBc,EAAAC,EAAAC,cAAA,MAAIS,IAAKzB,GAAOA,OAItBc,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGG,KAAKxB,MAAMI,OAAOyB,IAAI,SAAAE,GAAG,OACxBZ,EAAAC,EAAAC,cAAA,MAAIS,IAAKC,GAAMA,iBA/EfC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ae5ca13.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    valueNum: undefined,\n    valueName: undefined,\n    number: [],\n    name: []\n  };\n\n  addNumber = () => {\n    let nums = this.state.number;\n    let newNums = nums.concat([this.state.valueNum]);\n    this.setState({\n      number: newNums,\n      valueNum: undefined,\n      valueName: undefined\n    });\n  };\n\n  onChangeNum = e => {\n    this.setState({ valueNum: e.target.value });\n  };\n\n  addName = () => {\n    let name = this.state.name;\n    let newNames = name.concat([this.state.valueName]);\n    this.setState({\n      name: newNames,\n      valueNum: undefined,\n      valueName: undefined\n    });\n  };\n\n  onChangeName = e => {\n    this.setState({ valueName: e.target.value });\n  };\n\n  add = () => {\n    this.addName();\n    this.addNumber();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Ashley's React Address Book</h1>\n        <input\n          className=\"name\"\n          type=\"text\"\n          value={this.state.value}\n          placeholder=\"Name\"\n          onChange={this.onChangeName}\n          required\n        />\n        <input\n          className=\"number\"\n          type=\"text\"\n          value={this.state.value}\n          placeholder=\"Number\"\n          onChange={this.onChangeNum}\n          required\n        />\n        <input type=\"submit\" value=\"Submit\" onClick={this.add} />\n\n        <table className=\"table\">\n          <tr>\n            <th>Name</th>\n            <th>Number</th>\n          </tr>\n          <tr>\n            <td>\n              <ul>\n                {this.state.name.map(name => (\n                  <li key={name}>{name}</li>\n                ))}\n              </ul>\n            </td>\n            <td>\n              <ul>\n                {this.state.number.map(num => (\n                  <li key={num}>{num}</li>\n                ))}\n              </ul>\n            </td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}